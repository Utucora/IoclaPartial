Lab1




Lab4

cf-of:
carry over and overflow flags
In eax, mai exact in al, daca vrem sa activam un flag de mai sus:
overflow:
mov al, 127
add al, 1

carry-over:
mov al 0xFF
add al, 1

ca sa le facem pe amandoua
mov al, 0xFF
add al, 1
xor eax, eax
mov al, 127
add al

conditional-jumps:
newString: db "Goodbye, World!", 0
PRINTF32 `%s\n\x0`, newString
;Asa se creeaza si se printeaza un string
;in section data
N: dd 6                         ; N = 6
;in main:
mov ecx, DWORD [N]
;Asa se declara o variabila si se pune in ecx

fibonacci:
PRINTF32 `%d\n\x0`, ecx
;Asas se printeaza ecx
Am calculat si fibonacci, nu am invatat nimic util, e o mizerie



Lab 5:
division:
; SPDX-License-Identifier: BSD-3-Clause

%include "printf32.asm"

; https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic

section .data
    dividend1 db 91
    divisor1 db 27
    dividend2 dd 67254
    divisor2 dw 1349
    dividend3 dq 69094148
    divisor3 dd 87621

section .text
extern printf
global main
main:
    push ebp
    mov ebp, esp

    xor eax, eax

    mov al, byte [dividend1]
    mov bl, byte [divisor1]
    div bl

    xor ebx, ebx
    mov bl, al
    PRINTF32 `Quotient: %hhu\n\x0`, ebx

    xor ebx, ebx
    mov bl, ah
    PRINTF32 `Remainder: %hhu\n\x0`, ebx

    mov edx, [dividend2]
    mov ax, dx
    shr edx, 16
    mov bx, word [divisor2]
    div bx

    xor ebx, ebx
    mov bx, ax
    PRINTF32 `Quotient: %hhu\n\x0`, ebx

    xor ebx, ebx
    mov bx, dx
    PRINTF32 `Remainder: %hu\n\x0`, ebx

    mov eax, dword [dividend3]
    mov edx, dword [dividend3 + 4]
    mov ebx, dword [divisor3]
    div ebx

    PRINTF32 `Quotient: %u\nRemainder: %u\n\x0`, eax, edx

    leave
    ret
DIVIZIUNEA ESTE CEL MAI MARE OBSTACOL IN VIATA MEA E ORIBILA SI AR TREBUI SA FIE SIMPLA!!!!!!!!!!!

Putem face si asa mai usor:
section .data
    dividend1 db 91
    divisor1 db 27
    dividend2 dd 67254
    divisor2 dw 1349
    dividend3 dq 69094148
    divisor3 dd 87621



    xor eax, eax
    xor edx, edx
    xor ebx, ebx
    movzx ebx, word[divisor2]
    mov eax, dword[dividend2]
    div ebx
    PRINTF32 `Quotient: %u\nRemainder: %u\n\x0`, eax, edx
    xor edx, edx
    xor eax, eax
    xor ebx, ebx
    movzx ebx, byte[divisor1]
    mov eax, dword[dividend2]
    div ebx
    PRINTF32 `Quotient: %u\nRemainder: %u\n\x0`, eax, edx
!!!!Nu se pune movzx la eax, deoarece dividend2 deja este dword la fel ca eax fiind registru de 4bytes
    
    xor edx, edx
    xor eax, eax
    xor ebx, ebx
    movzx eax, byte[dividend1]
    movzx ebx, byte[divisor1]
    div ebx
    PRINTF32 `Quotient: %u\nRemainder: %u\n\x0`, eax, edx
!!Aici se pune movzx la amandoua deoarece le luam dintr-un "tip de date" inferior si extindem(extindem de la 1 byte la 4, cat au eax/ebx)
movzx inseamna de fapt mov zero-extend, adica completeaza cu 0


mul:
; SPDX-License-Identifier: BSD-3-Clause

%include "printf32.asm"

; https://en.wikibooks.org/wiki/X86_Assembly/Arithmetic

section .data
    num1 db 43
    num2 db 39
    num1_w dw 1349
    num2_w dw 9949
    num1_d dd 134932
    num2_d dd 994912

section .text
extern printf
global main
main:
    push ebp
    mov ebp, esp

    ; Multiplication for db
    mov al, byte [num1]
    mov bl, byte [num2]
    mul bl

    ; Print result in hexa
    PRINTF32 `Result is: 0x%hx\n\x0`, eax


   ; TODO: Implement multiplication for dw and dd data types.
    xor eax, eax
    xor ebx, ebx
    movzx eax, word[num1_w]
    movzx ebx, word[num2_w]
    mul ebx
    PRINTF32 `Result is: %u\n\x0`,eax
    leave
    ret

Pentru inmultire pe dd e cam over, nu merge afisat, dar se poate calcula
    mov eax, dword [num1_d]
    mov ebx, dword [num2_d]
    mul ebx

    ; Print result in hexa
    PRINTF32 `Result is: 0x%x%x\n\x0`, edx, eax
Afisat in hexa, deci o mizerie inutila

    
Lab 06:

courses:
!!!!Cand folosesc PRINTF32 `` trebuie sa se termine cu \x0 pentru a nu printa valori reziduale
Pentru un exemplu de PRINTF32 bun in lab 6 courses. Se arata cum se pun pe stiva registrii si stringuri etc si se afiseaza cu PRINTF32

mul_arrays:
    ft util, arata cum sa traversez un array si sa fac smecherii cu dimensiuni din byte in word si sa si printez

In lab 07 si 08 sunt ft multe chestii utile



Model program C care apeleaza functii asm

#include <stdio.h>

// Declarăm funcția definită în NASM
extern int check_row(char* sudoku, int row);
extern int check_column(char* sudoku, int row);
extern int check_box(char* sudoku, int row);

int main() {
    // Exemplu de Sudoku corect (doar prima linie e verificată aici)
    char sudoku[81] = {
        '1', '5', '4', '9', '3', '2', '6', '7', '8',
		'8', '9', '3', '6', '7', '5', '1', '4', '2',
		'7', '2', '6', '4', '1', '8', '3', '5', '9',
		'4', '6', '8', '3', '9', '1', '7', '2', '5',
		'9', '3', '5', '7', '-4', '4', '8', '6', '1',
		'2', '7', '1', '8', '5', '6', '4', '9', '3',
		'3', '1', '7', '2', '6', '9', '5', '8', '4',
		'5', '4', '9', '1', '8', '7', '2', '3', '6',
		'6', '8', '2', '5', '4', '3', '9', '1', '7'
    };

    for (int i = 0; i < 9; i++) {
        int result = check_row(sudoku, i);
        printf("Row %d is %s\n", i, (result == 1 ? "OK" : "WRONG"));
        printf("sum: %d\n", result);
    }
    
    for (int i = 0; i < 9; i++) {
        int result = check_column(sudoku, i);
        printf("Column %d is %s\n", i, (result == 1 ? "OK" : "WRONG"));
        printf("sum: %d\n", result);
    }
    for (int i = 0; i < 9; i++) {
        int result = check_box(sudoku, i);
        printf("Box %d is %s\n", i, (result == 1 ? "OK" : "WRONG"));
        printf("sum: %d\n", result);
    }
    return 0;
}

cum se compileaza:
nasm -f elf32 sudoku.asm -o sudoku.o //asa se compileaza un nasm
gcc -m32 Manual_Checker.c sudoku.o -o program //Cred ca se pot pune mai multe din alea .o la rand, dar aici nu e nevoie, deoarece sudoku.asm contine toate functiile apelate in main:

;%include "../include/io.mac"

extern printf
global check_row
global check_column
global check_box
; you can declare any helper variables in .data or .bss

section .text


; int check_row(char* sudoku, int row);
check_row:
    ;; DO NOT MODIFY
    push    ebp
    mov     ebp, esp
    push ebx
    push ecx
    push edx
    push esi
    push edi

    mov     esi, [ebp + 8]  ; char* sudoku, pointer to 81-long char array
    mov     edx, [ebp + 12]  ; int row 
    ;; DO NOT MODIFY
   
    ;; Freestyle starts here
    xor eax, eax
    imul edx, 9
    add esi, edx
    ;Il ducem pe esi pe linia row coloana 1
    ;Urmeaza sa parcurgem coloana cu coloana si adunam la eax valaorea din spatiu ca int
    xor ecx, ecx
loop_for_row:
    cmp ecx, 9
        je end_loop_row
    add al, [esi]
    ;sub al, 48 ;Transformam din char in int
    inc ecx
    inc esi
    jmp loop_for_row

end_loop_row:
    cmp eax, 45
        je row_ok
    jmp row_not_ok

row_ok:
    xor eax, eax
    mov eax, 1
    jmp end_check_row

row_not_ok:
    xor eax, eax
    mov eax, 2
    jmp end_check_row

    ;; MAKE SURE TO LEAVE YOUR RESULT IN EAX BY THE END OF THE FUNCTION
    ;; Remember: OK = 1, NOT_OKAY = 2
    ;; ex. if this row is okay, by this point eax should contain the value 1 

    ;; Freestyle ends here
end_check_row:
    ;; DO NOT MODIFY

    pop edi
    pop esi
    pop edx
    pop ecx
    pop ebx
    leave
    ret
    
    ;; DO NOT MODIFY

; int check_column(char* sudoku, int column);
check_column:
    ;; DO NOT MODIFY
    push    ebp
    mov     ebp, esp
    push ebx
    push ecx
    push edx
    push esi
    push edi

    mov     esi, [ebp + 8]  ; char* sudoku, pointer to 81-long char array
    mov     edx, [ebp + 12]  ; int column 
    ;; DO NOT MODIFY
   
    ;; Freestyle starts here
    xor eax, eax
    xor ecx, ecx ;Contorul pentru linii(parcurgem pe coloane)
    add esi, edx
loop_for_column:
    cmp ecx, 9
        je end_loop_column
    add al, [esi]
    ;sub al, 48
    add esi, 9
    inc ecx
    jmp loop_for_column

end_loop_column:
    cmp eax, 45
        je ok_column
    jmp not_ok_column



ok_column:
    xor eax, eax
    mov eax, 1
    jmp end_check_column

not_ok_column:
    xor eax, eax
    mov eax, 2
    jmp end_check_column

    ;; MAKE SURE TO LEAVE YOUR RESULT IN EAX BY THE END OF THE FUNCTION
    ;; Remember: OK = 1, NOT_OKAY = 2
    ;; ex. if this column is okay, by this point eax should contain the value 1 

    ;; Freestyle ends here
end_check_column:
    ;; DO NOT MODIFY

    pop edi
    pop esi
    pop edx
    pop ecx
    pop ebx
    leave
    ret
    
    ;; DO NOT MODIFY


; int check_box(char* sudoku, int box);
check_box:
    ;; DO NOT MODIFY
    push    ebp
    mov     ebp, esp
    push ebx
    push ecx
    push edx
    push esi
    push edi

    mov     esi, [ebp + 8]  ; char* sudoku, pointer to 81-long char array
    mov     edx, [ebp + 12]  ; int box 
    ;; DO NOT MODIFY
    ;; Freestyle starts here
    xor edi, edi
    xor eax, eax
    xor ecx, ecx

    cmp edx, 0
        je start_prog
    ;Daca mi se zice cutia n, ea are coltul din stanga sus pe linia n/3
    xor edi, edi ;In edi voi tine numarul liniilor(trebuie sa parcug 3)
    mov edi, edx
    xor edx, edx
    mov ecx, 3
    mov eax, edx
    div ecx ;In eax obtin astfel linia de unde incep
    imul eax, 9
    add esi, eax
    xor eax, eax
    xor ecx, ecx
    ;Acum il am pe esi la linia corecta, trebuie sa gasesc si coloana
    xor edx, edx
    mov edx, edi
    mov eax, edx
    xor edx, edx
    mov ecx, 3
    div ecx
    mov ecx, edx
    xor edx, edx
    mov edx, edi
    xor edi, edi
    imul ecx, 3
    add esi, ecx
    xor ecx, ecx
    xor eax, eax
    xor edi, edi
    ;Urmeaza sa parcurg linia coloana cu coloana

start_prog:

move_box_col:
    cmp ecx, 3
        je next_line
    add al, [esi]
    ;sub al, 48
    inc ecx
    inc esi
    jmp move_box_col

next_line:
    xor ecx, ecx
    add edi, 9
    sub esi, 3
    add esi, 9
    cmp edi, 18
        jg check_ok_box
    jmp move_box_col

check_ok_box:
    cmp eax, 45
        je ok_box
    jmp not_ok_box

ok_box:
    xor eax, eax
    mov eax, 1
    jmp end_check_box

not_ok_box:
    xor eax, eax
    mov eax, 2
    jmp end_check_box






    ;; MAKE SURE TO LEAVE YOUR RESULT IN EAX BY THE END OF THE FUNCTION
    ;; Remember: OK = 1, NOT_OKAY = 2
    ;; ex. if this box is okay, by this point eax should contain the value 1 

    ;; Freestyle ends here
end_check_box:
    ;; DO NOT MODIFY

    pop edi
    pop esi
    pop edx
    pop ecx
    pop ebx
    leave
    ret
    
    ;; DO NOT MODIFY





JEGURI JEGURI JEGURI INUTILE 

cmp eax, eax    ; ZF = 1, pentru că diferența e 0
mov eax, -1     ; SF = 1, pentru că bitul de semn e 1

mov al, 255     ; 0xFF
add al, 1       ; CF = 1, pentru că 255 + 1 = 256 => overflow pe 8 biți

mov al, 127     ; cel mai mare pozitiv semnat pe 8 biți
add al, 1       ; OF = 1, rezultatul devine -128, semn greșit

mov al, 0x03    ; 00000011 (2 biți de 1) ⇒ PF = 1 (număr par de biți setați)

ZF	Zero Flag	rezultatul unei operații este zero	universal (signed + unsigned)
SF	Sign Flag	bitul de semn (cel mai semnificativ) al rezultatului este 1 (negativ)	semnat
CF	Carry Flag	apare carry/împrumut la adunare/scădere (unsigned overflow)	unsigned
OF	Overflow Flag	rezultatul are semn greșit (overflow semnat)	signed
PF	Parity Flag	rezultatul are număr par de biți setați	rar folosit


je	jz	ZF = 1	egal	universal
jne	jnz	ZF = 0	diferit	universal
jg	jnle	ZF = 0, SF = OF	mai mare (signed)	semnat
jge	jnl	SF = OF	mai mare sau egal (signed)	semnat
jl	jnge	SF ≠ OF	mai mic (signed)	semnat
jle	jng	ZF = 1 or SF ≠ OF	mai mic sau egal (signed)	semnat
ja	jnbe	CF = 0 and ZF = 0	mai mare (unsigned)	nesemnat
jae	jnb / jnc	CF = 0	mai mare sau egal (unsigned)	nesemnat
jb	jnae	CF = 1	mai mic (unsigned)	nesemnat
jbe	jna	CF = 1 or ZF = 1	mai mic sau egal (unsigned)	nesemnat
js	-	SF = 1	semn negativ	semnat
jns	-	SF = 0	semn pozitiv	semnat
jo	-	OF = 1	overflow	semnat
jno	-	OF = 0	fără overflow	semnat
jc	-	CF = 1	carry (depasire la unsigned)	nesemnat
jnc	-	CF = 0	fără carry	nesemnat
jp	jpe	PF = 1	paritate pară	rar
jnp	jpo	PF = 0	paritate impară	rar
STOP JEGURI INUTILE

Model partial 03:
Subiectul 1
Ești unul dintre cei mai talentați spioni din toată lumea, și tocmai ai primit vestea că inamicul are niște planuri mărețe,
pe care le va pune în aplicare în aproximativ o oră. Se pare că soarta omenirii stă în mâinile tale; trebuie să afli ce
pune la cale inamicul până nu e prea târziu!
a) [2p] Identifică calea bibliotecii standard C cu care este linkat executabilul crackme.
b) [1p] Ai interceptat un mesaj codat transmis de către inamic. Trebuie să îl decodifici.
Mesajul codat a fost salvat în vectorul de signed chars decode_me din fișierul decode.c și a fost obținut prin aplicarea
operatorului ~ pe fiecare dintre caracterele inițiale.
c) [4p] De data aceasta ai reușit să interceptezi un mesaj care conține și informații utile!
Cu toate acestea, există o problemă: inamicul a pus o vrajă pe acest mesaj. Din acest motiv, nu merge să printezi
direct mesajul. Este afișat doar primul cuvânt, însă tu știi cu siguranță că dimensiunea șirului este de 66 de octeți
utili, așa cum știi că mesajul poate conține și \0 ca oricare dintre octeții săi.
Trebuie să modifici printarea mesajului în sorcery.c astfel încât acesta să fie afișat în întregime.
d) [3p] Ai plecat imediat înapoi către bază pentru a transmite veștile oribile, dar ai fost interceptat de un soldat
inamic. Acesta nu știe că ești un spion, însă îți cere o parolă.
Găsește parola analizând executabilul crackme.
Subiectul 2
Se pare că ai ajuns înapoi la bază la timp cu informațiile vitale, reușind să întorci balanța în favoarea ta. Acum este
timpul să ataci.
a) [3p] Stația principală care se ocupă de emiterea informațiilor către aliații tăi nu funcționează. Rezolvă segmen-
tation fault-ul din fișierul emitter.asm. ATENȚIE! Nu modifica funcția main!
b) [4p] Acum că poți transmite informații către aliații tăi, trebuie să îi anunți despre următorul atac. Pentru asta,
există funcția specială broadcast (implementată extern), care are următoarea semnătură:
void broadcast(struct info *info);
struct info {
int month, day;
char *location;
} __attribute__((packed));
Trebuie să transmiți un mesaj despre următorul atac, planificat să aibă loc în orașul Ardhalis. Luna și ziua atacului
vor fi introduse de la tastatură.
Modifică fișierul attack.asm, citește de la tastură luna și ziua atacului și apelează funcția broadcast astfel încât să
fie afișate datele cerute. ATENȚIE! Nu defini alte variabile globale decât cele deja existente. O structură declarată
cu __attribute__((packed)) are câmpurile reținute liniar în memorie, fără padding.
c) [3p] Pentru a autoriza atacul trebuie introdusă o parolă secretă. Scrie în fișierul passwords.asm o funcție care
să aibă următoarea semnătură:
int filter(int *src_array, int src_array_len, int *dest_array);
Funcția va memora în vectorul destinație doar valorile divizibile cu 42 din vectorul sursă, păstrând ordinea
originală.
Exemplu: {43, 6, 10, 4242, 82, 982, 165, 424242, 12, 8484, 4242424242, 42} -> {4242, 424242, 8484, 4242424242, 42}.
Modifică, apoi, fișierul passwords.asm, apelând funcția de mai sus și afișând vectorul cu parola prelucrată (finală).
ATENȚIE! Trebuie să folosești variabilele transmise prin parametri la funcție în prelucrarea vectorilor! De asemenea,
lungimea vectorului destinație trebuie să fie returnată de către funcție și utilizată la afișare!

1:
a)ldd crackme
ibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6

Răspunsul va fi calea completă către libc.so.6.


b)original[i] = ~decode_me[i];

c)    fwrite(msg, 1, 66, stdout);

d)Dai cu strings crackme(nu merge), cu objdump -d crackme(nu merge). Deci deschidem cu ghidra si cautam functia care verifica parola si incerci sa iti dai seama ce face

2:
a)Muti stringul in care se scrie din .rodata in .data
b)

section .data
	; WARNING! You must not define any new global variables.
	attack_location db "Ardhalis", 0
	read_fmt db "%d%d", 0

section .text
extern broadcast
extern scanf
global main

main:
	push ebp
	mov ebp, esp

	; Rezervăm loc pentru struct info pe stivă (12 octeți)
	sub esp, 12        ; [ebp-12] = month, [ebp-8] = day, [ebp-4] = location ptr

	; -----------------------
	; Citim luna și ziua
	; scanf("%d%d", &month, &day)
	; -----------------------
	lea eax, [ebp-12]  ; &month
	push eax
	lea eax, [ebp-8]   ; &day
	push eax
	push read_fmt
	call scanf
	add esp, 12        ; curățăm cei 3 parametri

	; -----------------------
	; Setăm câmpul .location
	; -----------------------
	mov eax, attack_location
	mov [ebp-4], eax   ; info.location = &attack_location

	; -----------------------
	; Apelăm broadcast(&info)
	; -----------------------
	lea eax, [ebp-12]  ; adresa structurii info
	push eax
	call broadcast
	add esp, 4

	leave
	ret 

c)
section .data
    magic_number equ 42

    ; DO NOT ADD NEW GLOBALS
    raw_password dd 43, 6, 10, 4242, 82, 982, 165, 424242, 12, 8484, 4242424242, 42
    raw_password_len equ 13
    final_password times 13 dd 0
    fmt db "%d ", 0

section .text
extern printf
global main

; ------------------------
; FUNCȚIA filter
; ------------------------
filter:
    push ebp
    mov ebp, esp

    mov esi, [ebp + 8]   ; src_array
    mov ecx, [ebp + 12]  ; src_array_len
    mov edi, [ebp + 16]  ; dest_array
    xor eax, eax         ; eax = counter

.loop:
    cmp ecx, 0
    je .done

    mov edx, [esi]       ; edx = element curent
    mov ebx, magic_number
    cdq
    idiv ebx             ; edx = rest

    cmp edx, 0
    jne .skip

    mov ebx, [esi]       ; REG → MEM → REG
    mov [edi], ebx       ; scriere corectă
    add edi, 4
    inc eax              ; am adăugat un element

.skip:
    add esi, 4
    dec ecx
    jmp .loop

.done:
    pop ebp
    ret

; ------------------------
; FUNCȚIA main
; ------------------------
main:
    push ebp
    mov ebp, esp

    ; Apelăm filter(raw_password, raw_password_len, final_password)
    push final_password
    push raw_password_len
    push raw_password
    call filter
    add esp, 12

    ; eax = lungimea rezultatului
    mov ecx, eax
    mov esi, final_password

.print_loop:
    cmp ecx, 0
    je .end

    push dword [esi]
    push fmt
    call printf
    add esp, 8

    add esi, 4
    dec ecx
    jmp .print_loop

.end:
    leave
    ret
Nu merge dar e ceva de genul


